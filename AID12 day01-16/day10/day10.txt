day09回顾:
  函数的参数:
    实参(给)
      传递方式:
        位置传参
           序列传参
        关键字传参
           字典关键字传参
    形参(接)
      缺省参数(default argument)
        def fx(a=0, b=2, c=3):
            ...
      形参的定义方式(四种)
        位置形参
        星号元组形参
        命名关键字形参
        双星号字典形参

      def fx(a, b, *args, c, d, **kwargs):
           ...

全局变量和局部变量
  局部变量 local

  全局变量 global
    创建用赋值语句
    销毁用del 语句

两个函数 globals(), locals() 返回全局变量和局部变量的字典

day10 笔记
函数变量
  函数名是变量,它在创建函数时绑定一个函数

  示例:
    def f1():
       print("f1函数被调用")

    f2 = f1  # 两个变量同时绑定一个函数
    f2()     # f1函数被调用

  示例2:
def f1():
    print("f1")

def f2():
    print("f2")

f1, f2 = f2, f1

f1()  # f2


一个函数可以作为另一个函数的实参传递
  示例见:
    function_as_args.py
    function_as_args2.py

练习: 
  看懂下列代码:
    def myinput(fn):
        L = [1, 3, 5, 7, 9]
        return fn(L)

    print(myinput(max))  # 9
    print(myinput(min))  # 1
    print(myinput(sum))  # 25



函数可以作为另一个函数的返回值
  示例见:
    function_as_return_value.py


练习:
  写一个计算公式的解释执行器
    已知有如下一些函数:
        def myadd(x, y):
            return x + y
        def mysum(x, y):
            return x - y
        def mymul(x, y):
            return x * y
      ...
    定一个带有一个参数的函数 get_func(s):
        def get_func(s):
            ...  # 此处自己实现
    此函数的在传入字符串"加"或"+" 返回myadd函数;
    此函数的在传入字符串"乘"或"*" 返回mysum函数, ...
    在主函数中程序如下:
        def main():
            while True:
                s = input("请输入计算公式: ")  # 10 加 20
                L = s.split()  # L = ['10', '加', '20']
                a = int(L[0])
                b = int(L[2])
                fn = get_func(L[1])
                print("结果是:", fn(a, b))  # 结果是: 30




函数的嵌套定义
  函数嵌套定义是指一个函数里用def语句来创建其它函数的情况

  示例见:
    function_embed_def.py
    

python 作用域
  作用域也叫名字空间,是访问变量时查找变量名的范围空间

  示例:
    a = 100
    def fx():
        a = 10000  # a=10000和a=100是两个不同作用域内的变量
        print(a)

    fx()
    print(a)


python的四个作用域 LEGB
    作用域               英文解释                英文简写
局部作用域(函数内)       Local(function)             L
外部嵌套函数作用域        Enclosing function local   E
函数定义所在模块的作用域   Global(module)             G
python 内置模块的作用域   Builtin(Python)            B

示例见:
  namespace.py

变量名的查找规则:
  在访问变量时,先查找本地变量,然后是包裹此函数外部的子数内部的
  变量,之后是全局变量,最后是内置变量,即:
      L --> E --> G --> B
  在默认的情况下,变量名赋值会创建或者改变本地作用域的变量

练习:
  执行以下程序,看执行结果是什么?为什么?
  L = [1, 2, 3]
  v = 100
  def f1():
      L.append(4)
      v = 200
  f1()
  print(L)  # ???
  print(v)  # ???

  def f2():
      L += [5]
      v += 1
  f2()  # 此处会怎么样?为什么?
  




global语句:
  作用:
    告诉解释执行器, global语句声明的一个或多个变量，这些变量的
    作用域为模块级的作用域，也称作全局变量
    全局声明(global) 将赋值变量映射到模块文件内部的作用域
  语法:
    global 变量1, 变量2, ...
  示例:
    global ga, gb
    global gc
  示例见:
    global.py
  说明:
    1. 全局变量如果要在函数内部被赋值，则必须经过全局声明(否则
       会被认为是局部变量)
    2. 全局变量在函数内部不经过声明就可以直接访问（变量已经存在
       并关联一个对象)
    3. 不能先声明局部变量，再用global声明为全局变量，此做法不
       附合规则
    4. global变量列表里的变量名不能出现在函数的形参列表里

练习:
  用全局变量记录一个函数fx调用的次数,部分代码如下:
  count = 0
  def fx(name):
      print("你好", name)
      .... # 此处自己实现
  fx('小张')
  fx('小李')
  print("fx函数共被调用", count, '次')  # 2


nonlocal 语句
  作用:
    告诉解释器 nonlocal 声明的变量不是局部变量,也不是全局变量
    而是外部嵌套函数内的变量
  语法:
    nonlocal 变量名1, 变量名2, ...
  示例见:
    nonlocal.py
  说明:
    1. nonlocal语句只能在被嵌套函数内部进行使用
    2. 对nonlocal变量进行赋值将对外部嵌套函数作用域内的变量
       进行操作
    3. 当有两层或两层以上函数嵌套时,访问nonlocal变量只对最近
       一层变量进行操作
    4. nonlocal语句的变量列表里的变量名,不能出现在此函数形参
       列表中



问题:
  def 语句的作用是创建函数, 同时用变量名绑定这个函数

lambda 表达式(又称匿名函数)
  作用:
    创建一个匿名函数对象
    同def类似,但不提供函数名
  语法:
    lambda [函数形式列表]: 表达式
  示例见:
    lambda.py
  说明:
    lambda 表达式创建的函数只能包含一条表达式
    lambda 比函数简单且可以随时创建和销毁,有利于减少程序的偶合度

练习:
  1. 写一个lambda 表达式
    fx = lambda n: ...
  此表达式创建的函数判断n这个数的2次方+1 能否被5整除,如果能被整
  除返回True,否则返回False
  如:
    print(fx(3))  # True
    print(fx(4))  # False

  2. 写一个lambda 表达式来创建函数，此函数返回两个形参变量的最
  　　大值
    def mymax(x, y):
        ...
    mymax = lambda ......
    print(mymax(100, 200))  # 200
    print(mymax("100", "20"))  # 20  <-- 注意这是字符串

  看懂下面的程序在做什么?
    def fx(f, x, y):
        print(f(x, y))
    fx((lambda a, b: a + b), 100, 200)
    fx((lambda a, b: a * b), 3, 4)


eval() 和 exec() 函数
  eval(source, globals=None, locals=None) 把一个字符串
        source 当成一个表达式来执行，返回表达式执行后的结果
  exec(source, globals=None, locals=None) 把一个字符串
        source 当成一个＂程序＂来执行

eval 函数示例见:
  eval.py

exec 函数示例见:
  


练习:
  1. 写一个函数mysum(n) ，此函数用来计算
     1 + 2 + 3 + 4 + ... + n 的和
     (要求: 不允许调用sum)
    如:
      print(mysum(100))  # 5050
      print(mysum(4))  # 10

  2. 写一个函数myfac(n) 来计算n!(n的阶乘)
    n! = 1*2*3*4*....*n
    如:
      print(myfac(5))  # 120
  3. 写一个函数计算: 
    1 + 2**2 + 3**3 + ... + n ** n的和
    (n给个小点的数来进行测试)
  4. 实现带界面的学生信息管理系统
    操作界面如下:
      +--------------------------+
      | 1) 添加学生信息            |
      | 2) 显示学生信息            |
      | 3) 删除学生信息            |
      | 4) 修改学生成绩            |
      | q) 退出                   |
      +--------------------------+
    学生信息包括: 姓名，年龄，成绩(与之前相同), 每个功能写一个
    函数与之相对应

