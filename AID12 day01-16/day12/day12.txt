day11 回顾
函数式编程
  函数的可重入性:
    输入一定,结果必然一定
    在函数内部不能访问除局部变量以外的变量
  高阶函数 hight order function
    map(func, 可迭代对象1, 可迭代对象2, ...)
    filter(func, 可迭代对象)
    sorted(可迭代对象, key=None, reverse=False)
        def key_func(可迭代对象内的元组):
            return 值(用比较的依据)

递归函数
  缺点:
    层数太多的递归可能会引起运行的不确定性

闭包:
  闭包是指引用了外部嵌套函数作用域内变量的函数(内嵌函数)

  闭包的特点:
    当内嵌函数引用了外部嵌套函数作用域的变量时(外部嵌套函数的变量
    不会被释放)
  闭包的三个条件:
    1. 有内嵌函数
    2. 内嵌函数要引用外部嵌套函数的变量
    3. 外部函数要返回内嵌函数

day12 笔记
装饰器 decorators(专业提高篇)
什么是装饰器
  装饰器是一个函数,主要作用是用来包装另一个函数或类(后面才讲)

  作用:
    在不修改被装饰函数的源代码,不改变被装饰函数的调用方式的情况
    下添加或改变函数的功能

函数装饰器的语法:
    def 装饰器函数名(fn):
        语句块
        return 函数对象
    
    @装饰器函数名<换行>
    def 被装饰函数名(形参列表):
        语句块

  示例见:
    mydeco1.py
    mydeco2.py

  函数装饰器的应用示例:
    mydeco3.py








函数的文档字符串:
  函数内第一次未赋值给任何变量的字符串是此函数的方档字符串
  函数的文档字符串可以用 >>> help(函数名) 查看

  语法:
    def 函数名(参数列表):
        '函数的文档字符串'
        语句块
  示例:
    def myfunc(a, b, c=0):
        '''这是myfunc函数的方档字符串
        参数:
           a 代表xxx
           b 代表yyy
           ...
        '''
        pass
  说明:
    文档字符串通常用来说明本函数的功能,使用方法和形参列表
    函数的文档字符串绑定在函数的 __doc__属性上

函数的 __doc__ 属性
  __doc__属性用于绑定函数的文档字符串


函数的 __name__属性
  __name__属性用来记录函数名

  注:
    以双下划线开头,以双下划线结尾的标识符通常代表python的特殊
    变量

  示例:
    def fabc():
        pass
    fn = fabc
    print(fn.__name__)  # 'fabc'
    print(fabc.__name__)  # 'fabc'




函数定义语句(def 语句)的完整语法:
  [@装饰器名1]
  [@装饰器名2]
  [...]
  def 函数名([位置形参], [*元组形参], [命名关键字形参],
            [**字典形参]):
      '文档字符串'
      语句块
  注:
    [] 代表其中的内容可省略


面试题:
  L = [1, 2, 3]
  def f(n=0, lst=[]):
      ''' 缺省参数[]在def语句执行时就已经创建该列表,并一直被
      f函数绑定'''
      lst.append(n)
      print(lst)

  f(4, L)  # [1, 2, 3, 4]
  f(5, L)  # [1, 2, 3, 4, 5]
  f(100)  # [100]
  f(200)  # [100, 200]  # ???

  请问打印结果是什么? 为什么?

解决办法:
  L = [1, 2, 3]
  def f(n=0, lst=None):
      if lst is None:
          lst = []  # 创建一个新的空列表
      lst.append(n)
      print(lst)

  f(4, L)  # [1, 2, 3, 4]
  f(5, L)  # [1, 2, 3, 4, 5]
  f(100)  # [100]
  f(200)  # [200]  # 此函数可重入





模块 Module
  什么是模块:
    模块是一个包含有一系列数据,函数,类等组成的程序组
    模块是一个文件,模块文件通常以.py结尾
  作用:
    1. 让一些相关的数据,函数,类等有逻辑的组织在一起,使逻辑结
       构更加清晰
    2. 模块中的数据,函数和类等可提供给其它模块或程序使用

  模块的分类:
    1. 内置模块,在解析器的内部可以直接使用(一般用C语言编写)
    2. 标准库模块,安装python时已安装且可直接使用
    3. 第三方模块(通常为开源,需要自己安装)
        安装命令:
          $ pip3 install 模块名
    4. 用户自己编写的模块(可以作为其它人的第三方模块)


模块的导入语句:
import 语句
  语法:
    import 模块名1 [as 模块新名1], 模块名2 [as 模块新名2],...
  示例:
    import math
    import sys, os
    import tensorflow as tf
  作用:
    将某模块整体导入到当前模块中
  用法:
    模块名.属性名
  如:
    import math
    math.factorial(5)

dir(obj)  函数,返回模块中所有属性的字符串列表
help(obj) 函数,可以查看模块的相关文档字符串
   >>> dir(math)
   >>> help(math)


练习:
  1. 输入一个圆的半径,打印出这个圆的面积
  2. 输入一个圆的面积,打印出这个圆的半径
    (要求用math模块里的函数和数据)

from import 语句
  语法:
    from 模块名 import 模块属性名1 [as 属性新名1], 模块属
       性名2 [as 属性新名2], ...
  作用:
    将某模块内的一个或多个属性导入到当前模块的作用域
  示例:
    from math import factorial as fac
    from math import sin
    from math import pi, sqrt
    print(pi/2)
    print(fac(5))


from import *语句
  语法:
    from 模块名 import *
  作用:
    将某模块的所有属性导入到当前模块
  示例:
    from math import *
    sin(pi/2)
    factorial(5)

dir 函数:
  dir([对象])  返回一个字符串列表
参数说明
  如果没有参数调用,则返回当前作用域内所有变量的列表
  如果给定一个对象作为参数,则返回这个对象的所有变量的列表
    对于一个模块,返回这个模块的全部变量
    对于一个类对象,返回类对象的所有变量,并递归基类对象的所有变量
    对于其它对象返回所有变量,类变量和基类变量


数学模块:
  文档参见:
    python_base_docs_html/数学模块math.html

时间模块
  文档参见:
    python_base_docs_html/时间模块time.html

练习:
  写一个程序,输入你的出生日期(年月日)
    1) 算出你已经出生了多少天?
    2) 算出你出生那天是星期几?


系统模块 sys
  文档参见:
    python_base_docs_html/系统模块sys.html


练习:
  1. 编写函数fun, 其功能是计算并返回下列多项式的和
     Sn = 1 + 1/1! + 1/2! + 1/3! + ... + 1/n!
    (建议用数学模块中的math.factorial(x) 函数)
    求当n = 20时,Sn的值

  2. 写一个程序,以电子时钟格式打印时间:
     格式为:
       HH:MM:SS

  3. 编写一个闹钟程序,启动时设置定时时间,到时间后打印
     一句"时间到!" 然后程序退出





