课程：MySQL关系数据库
进度：day01

课程主要内容：(易学难精)
1.数据库基本概念
2.MySQL的安装及配置
3.库管理
4.表管理
5.机构化查询语言：SQL(一种超过数据库语言)
6.数据约束
7.数据的导入、导出
8.权限管理
9.数据库事务
10.数据的存储引擎
11.E-R 关系图(数据关系图形化表示)
12.Python访问数据库

去IOE化
I: IBM       服务器、操作系统
O: Oracle
E: EMC       存储

今天的内容
1.数据库基本概念
    1)什么是数据库(database)
      按照某种数据模型，对数据进行科学、高效存取和管理的系统
    2)数据库管理系统DBMS(Database Management System) *重点*
      - 定义：位于操作系统和用户之间的软件系统，专门用于数据管理
             硬件->操作系统->系统软件->应用软件->用户
      - 常见的DBMS：Oracle, MySQL, DB2, SQL Server, Informix
    3)数据库系统：一般性统称，包含DBMS、软硬件、应用程序、DBA(数据库管理员)/用户
    4)DBMS应用场景
      - 数据库是一种重要的基础软件
      - 几乎应用于所有的软件系统
        (特别简单的单机版程序除外)
    5)数据管理的三个阶段
      - 人工管理阶段
        * 数据不单独进行管理，数据是附属于程序的
        * 优点：管理简单
        * 缺点：数据无法实现共享、无法实现独立
      - 文件系统阶段
        * 数据单独保存于文件中
        * 优点：数据独立保存，程序和数据实现分离，可共享，数据能够持久化存储
        * 缺点：数据之间的联系较弱，数据冗余，数据不一致性无法保证
      - 数据库管理阶段
        * 专门用一套软件来管理数据
        * 优点：数据独立性、可共享、低冗余
               数据库可靠性、安全性
               提供了友好的访问接口/界面
               丰富的工具(性能优化，备份/恢复，权限管理)
        * 缺点：需要付出额外的软硬件/人力成本
    6)数据库概念模型
      - 层次模型(过去)
      - 网状模型(过去)
      - 关系模型(主流)  *重点*
        * 目前主流数据库模型
        * 使用二维表表示数据/数据联系
        * IBM研究院 E.F.Codd在论文《大型共享数据库关系模型》中首先提出
      - 非关系模型
    7)关系模型基本概念  ***重点***
      a)关系
        - 二维表，由行、列组成
        - 二维表表示数据和数据间的联系
        - 行：也叫'记录'，一个实体(现实中可以区分的事物)
          列：也叫'字段'，表示实体的属性
      b)关系数据库：使用关系模型的数据库
      c)关系术语
        - 实体：现实中可以区分的事物
        - 关系：(规范的)二维表
            a)每个属性都是原子(不可分)的，不能重名
            b)关系中的次序不重要(集合)
        - 元组(行)：二维表中的一行称为元组
                  也叫'记录'，表示一个实体
        - 属性(列)：二维表中的列称为属性
                  表示实体的某个数据特征
        - 键(key)：关系中能够区分实体唯一性的属性，称之为键(键可能是多个)
        - 主键(Primary Key, PK)：从多个键中选取一个逻辑上唯一区分实体的属性(或属性组合)
            * 要求：非空、不重复
    8)关系模型优点
        - 建立在严格的数据理论基础上(集合学的分支)
        - 概念简单、单一、结构清晰

2.MySQL简介
    1)概述
        - 著名的、广泛使用的开源DBMS
        - 最早由瑞典MySQL AB公司开发
          2008年被SUN收购
          2009年SUN被Oracle收购
        - 原作者开发MariaDB，与MySQL保持最大兼容性
    2)MySQL的特点
        - 开源，成本低
        - 体积小，性能优异
        - 支持主流操作系统(windows/Linux/Unix)
        - 支持主流的开发预言(C、C++、Java、php、python等)
        - 可移植性强
    3)主要版本
        - Community Server，社区版，开源免费；不提供技术支持
        - Enterprise Edition，企业版，需要付费
        - Cluster，集群版，开源免费
        - Cluster CGE，高级集群版，付费
    4)安装
        - windows下安装：
            * 如果缺少基础库，先安装基础库 VC++
            * 安装过程中，需要注意的地方
                端口：推荐保持默认端口：3306
                root口令：牢记该口令，生产环境总应该具有一定强度
                添加用户：记住用户名、密码
            * 验证：
                a) 右击'我的电脑'->属性->服务
                b) netstat -an | findstr 3306
        - Ubuntu下安装：
            * apt-get 能自动解决包的依赖性问题
                第一步：安装组件
                sudo apt-get install mysql-server
                sudo apt-get install mysql-client
                sudo apt-get install libmysqlclient-dev
                第二步：确认安装结果
                查看端口：netstat -an | grep 3306

    5)服务管理
        sudo /etc/init.d/mysql status       - 查看状态
        sudo /etc/init.d/mysql start        - 启动服务
        sudo /etc/init.d/mysql stop         - 停止服务
        sudo /etc/init.d/mysql restart      - 重启服务

        ps -aux | grep mysql

        mysql -uroot -p
    6)客户端、服务器
        - 客户端：mysql
        - 服务器：mysqld

        客户端连接服务器命令：
            mysql -hlocalhost -uroot -p    # 可以在-p后直接把密码明文加上，不加空格
                参数：-hlocalhost  连接localhost服务器
                     -uroot       使用root用户登录
                     -p123456     root用户密码为123456
                注：如果连接其它服务器，将localhost改为服务器的实际IP地址
        退出登录：exit 或 quit 或 \q

3.MySQL操作
    1)SQL预言：结构化查询预言    Structure Query Language
        - 用于数据库各种操作、管理
        - 每条SQL语句以 ; (英文封号)结束
        - 大小写不敏感
        - 不支持Tab键自动补齐功能
        - \c 废弃当前语句(输错等)
    2)库操作
        - 查看库：      show databases;
        - 进入某库：     use 库名称;    e.g. use sys;   进入sys库
        - 查看当前库：   select database();
        - 创建库：       create database 库名称 [default charset=字符集];
                            e.g. 创建名为bank的库，utf8字符集
                                 create database bank default charset=utf8;
        - 删除库：       drop database 库名称;
                            e.g. 删除名为bank的库，utf8字符集
                                 drop database bank;
        - 库的构成：表(存数据)、视图(数据窗口)、索引(提高查询速度)、触发器(一个动作触发另一个动作)、
                  存储过程(SQL语句编写的程序)、函数、用户及配置信息
        - 库的命名规范：
            * 由字符、数字、下划线组成 [A-Za-z0-9_]
            * 不能全部由数字构成
            * 库名称区分大小写
            * 库名称必须唯一
            * 避开特殊字符、MySQL关键字
    3)表操作(重点)
        - 查看表：show tables;
        - 创建表
            * 语法：create table 表名称(
                                字段1 类型(长度) 约束，
                                字段2 类型(长度) 约束，
                                ...
                                ) [指定字符集];
              e.g. 创建账户表，包含账号、户名字段
                   create table acct(
                        acct_no varchar(32),       -- 账号，字符串，最长32位
                        acct_name varchar(128)     -- 户名
                        ) default charset=utf8;    -- 指定字符集
        - 查看表结构：desc acct;
          查看建表语句：show create table acct
        - 删除表
            * 指令：drop table 表名称;
                e.g. 删除acct表
                drop table acct;
    4)数据操作
        - 插入
            * 重新创建acct表
            mysql> create table acct(
                -> acct_no varchar(32),         -- 账号，字符串
                -> acct_name varchar(128),      -- 户名
                -> cust_no varchar(32),         -- 客户编号
                -> acct_type int,               -- 账户类型
                -> reg_date date,               -- 开户日期，日期时间
                -> status int,                  -- 状态
                -> balance decimal(16,2)        -- 余额，数字
                                                -- 最长16位，2位小数
                ) default charset=utf8;
            * 需注意的地方：
                不能出现中文标点符号(注释除外)
                括号要正确配对，最好成对编写
                date 不是 data
                若出现 No database selected,是没有进入库
                最后一个字段后面不加逗号
            e.g. 插入单笔数据
                insert into acct values(
                '622345000001',
                'Jerry',
                'C0001',
                1,
                now(),    -- 取当前系统时间
                1，
                1000
                )
            * 查询验证：select * from acct;
            e.g. 插入多笔数据
                insert into acct values
                ('622345000003','Dekie','C0003',1,now(),1, 2000),
                ('622345000004','Dokas','C0004',1,now(),1, 4000);
            e.g. 指定字段插入
                insert into acct(acct_no, acct_name) values(
                '622345000005','Emma');
        - 查询操作
            格式：select * from 表名称 [where 条件1 [and/or 条件2 ...]]
                 select 字段1,字段2 from 表名称 [where 条件]
            * 选取部分列：投影运算
            示例：
                e.g. 查询所有行、所有列
                select * from acct;
                e.g. 查询指定字段
                select acct_no, acct_name, balance from acct;
                e.g. 查询指定字段，给每个字段起别名 [as] "别名",as 可以去掉
                select acct_no as "账号", acct_name "户名", balance/10000 as "余额(万元)" from acct;  -- 字段可以参与运算
                e.g. 带条件查询
                -- 一个条件
                select acct_no, acct_name, balance from acct
                where acct_no = '622345000003';
                -- 两个条件 and
                select acct_no, acct_name, balance from acct
                where acct_no = '622345000003' and acct_name='Dekie';
                -- 两个条件 or
                select acct_no, acct_name, balance from acct
                where acct_no = '622345000002' or acct_name='Dekie';
            练习：
                查询账号类型为1的所有账户信息
                select * from acct where acct_type=1;
                查询客户编号为C0001客户的账户信息
                select * from acct where cust_no='C0001';
                插入一笔数据，插入字段账号、户名、开户日期、金额
                insert into acct(acct_no,acct_name,reg_date,balance) values( '622345000009','GONGYin',now(),10000);
                查询所有账户类型为2,并且账户状态为1的账户
                select * from acct where acct_type=2 and status=1;














