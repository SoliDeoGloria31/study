上次类型回顾
1.数据类型
    1)数值类型：整型、浮点型(一般用decimal(m,n))
    2)字符类型：定长char、变长varchar
    3)日期时间类型：日期date、时间time、日期时间datetime、时间戳timestamp
                 日期时间函：now()/sysdate()
                            curdate()/curtime()
                            year()/month()/day()
                            date()/time()
    4)枚举类型：enum(只选一个)、set(可选一个或多个)
2.修改
    update acct
       set balance = balance + 100,
           status  = '2'
     where acct_no = '62345000001';
3.删除
    delete from acct
    where acct_no = '62345000001';
4.操作符
    1)比较：= > < >= <= <>(!=)
    2)逻辑：and、or
    3)范围：between...and...  在...和...之间，包含两边
           in、not in
    4)模糊查询：like
              _ : 匹配单个字符
              % : 匹配任意字符
    5)空/非空：is null / is not null
5.查询字句
    1)排序: order by 字段 [asc/desc]
    2)指定显示笔数：
        limit n:   显示前n笔
        limit m,n: 从第m笔开始(从0数)，显示n笔
    3)聚合函数：max/min, avg, sum, count
    4)分组：group by 字段
    5)分组聚合结果过滤：having 条件
6.执行顺序   ***难点***
    step1: from acct
           首先执行 from 语句，找到数据源
    step2: where
           执行 where 子句，选出满足条件的数据
    step3: group by acct_type
           按照指定字段分组
    step4: sum(balance), acct_type
           按照分组进行聚合
    step5: having acct_type is null
           对分组聚合后的数据进行过滤
    step6: order by acct_type desc
           排序
    step7: limit
           限制显示笔数

今天内容
1.表结构调整(alter table 表名)
    1)添加字段
        - 在最后面添加字段
          alter table 表名 add 字段名 类型
        - 在最前面添加字段
          alter table 表名 add 字段名 类型 first
        - 在指定字段后面添加字段
          alter table 表名 add 字段名 类型 after 字段名

        - 示例：
          * 创建表
            create table student(
              stu_no varchar(32),
              stu_name varchar(128)
            );
          * 添加字段
            alter table student add age int; -- 添加到最后
            alter table student add id int first; --添加到最前
            alter table student add
          -- 在stu_name 后面添加tel_no字段
            alter table student add tel_no varchar(32) after stu_name;
    2)修改字段
        - 修改类型
          alter table 表名 modify 字段名 类型(宽度)
        - 修改名称
          alter table 表名 change 原字段名 新字段名 类型(宽度)
        - 示例：
          -- 修改学生名称长度为64
             alter table student modify stu_name varchar(64);
          -- 修改age字段名称为stu_age
             alter table student change age stu_age int;
    3)删除字段
        - 语法：alter table 表名 drop 字段
        - 示例：alter table student drop id;  --删除id字段

-- 数据库：业务交互        -- 针对业务模块
-- 数据仓库：挖掘、分析     --

2.约束(constraint)
    1)什么是约束
        - 为保证数据的正确性、完整性、一致性，数据必须遵循的规则
    2)约束类型
        - 非空约束：字段的值不能为空
        - 唯一性约束：字段值唯一
        - 主键约束：字段作为主键，非空、唯一
        - 默认值：未填写时，设置默认值
        - 自动增加：字段值自动增加
        - 外键约束
    3)非空约束(not null)
        - 指定字段的值不能为空，如果插入时该字段为空值，则报错，无法插入
        - 语法：字段名称 数据类型(宽度) not null
        - 示例：
            create table customer(
              cust_no varchar(32) not null,
              cust_name varchar(128) not null,
              tel_no varchar(32) not null
            ) default charset=utf8;
            -- 插入一笔带空值的数据
            insert into customer(cust_no,cust_name)
            values('C0001','Jerry');
    4)唯一性约束(unique)
        - 该字段的值唯一、不重复
        - 语法：字段名称 数据类型 unique
        - 示例：
            create table customer(
              cust_no varchar(32) unique,
              cust_name varchar(128) not null,
              tel_no varchar(32) not null
            ) default charset=utf8;
            insert into customer values
            ('C0001','Jerry','13512345678');
            insert into customer values
            ('C0001','Tom','13512345679');
    5)主键(Primary Key, PK)
        - 主键用来唯一标识表中的一笔记录，非空、唯一
          主键和一笔数据有唯一的对应关系
          一个表最多只能有一个主键
          可以单个字段作为主键，也可以多个字段共同构成主键   -- 有时单个字段无法作主键
        - 语法：字段名称 类型(宽度) primary key
        - 示例：
            create table customer(
              cust_no varchar(32) primary key,
              cust_name varchar(128) not null,
              tel_no varchar(32) not null
            ) default charset=utf8;
            insert into customer values
            ('C0001','Jerry','13512345678');
            insert into customer values
            ('','Tom','13512345679');     -- 不会报错
            insert into customer values
            (Null,Tom','13512345679');    -- 会报错
    6)默认值(default)
        - 指定某个字段的默认值，如果插入一笔数据，该字段没有值，系统自动填写一个默认值
        - 语法：字段名称 类型(宽度) default 默认值
        - 示例：
            create table customer(
              cust_no varchar(32) primary key,
              cust_name varchar(128) not null,
              tel_no varchar(32) not null,
              status tinyint default 0
            ) default charset=utf8;
            insert into customer(cust_no,cust_name,tel_no)
             values ('C0001','Jerry','13512345678');
    7)自动增长(auto_increment)
        - 指定为自动增长的字段，插入时不需要设置值，系统在最大值基础上加1   -- 第一条记录为 1；
          可以和主键共同使用                                        -- 若最后一条记录为手动输入值，则再该值基础上再+1继续
        - 语法：字段名称 数据类型(宽度) auto_increment
        - 示例：
            create table ai_test(
              id int primary key auto_increment,
              name varchar(32)
            );
            insert into ai_test values(null,'Tom');
    8)外键约束(foreign key, FK)
        - 什么是外键：在当前表中不是主键，在另一个表中是主键
        - 外键的作用：保证数据一致性、完整性
        - 使用外键的条件：
            a)表的存储引擎类型为innodb
            b)被参照字段在外表中必须是主键
            c)当前表和外表中类型必须一致
        - 语法：
            constraint 外键名称
            foreign key(当前表字段)
            references 参照表(参照字段)
        - 示例：
            create table account(
              acct_no varchar(32) primary key,
              cust_no varchar(32) not null,
              -- 添加外键约束
              constraint fk_cust_no
              foreign key(cust_no)
              references customer(cust_no)
            );
            -- 在account 表中插入cust_no 为'C0001'的数据，插入失败
            -- account 参照了一个不存在的实体
            insert into account
            values('622345000001','C0001')
            -- 在customer表中插入一笔数据
            -- (cust_no 为'C0001',以满足account参照完整性，
            -- 再执行上面的插入语句，则可以成功)
            insert into customer(cust_no,cust_name,tel_no)
            values('C0001','Jerry','13511223344')
            -- 删除customer表中cust_no为'C0001'实体，
            -- 报错，因为删除以后又会造成参照不完整
            delete from customer where cust_no='C0001';
            -- 如果要删除C0001客户，必须先删除account
            -- 表中参照该实体的数据(语句略)



3.索引
    1)什么是索引
        - 索引是提高查询效率的一种技术(详单与一本字典的索引或目录)
        - 索引是一种单独存放的数据结构，包含着数据表中所有记录的引用指针
        - 根据索引能快速找到数据所在位置
        - 通过避免全表扫描提高检索效率
    2)索引类别
        - 普通索引、唯一索引
        - 单列索引、组合索引
    3)如何创建索引
        - 语法：index|unique|primary key(字段名称)
        - 说明：
            index：创建普通索引
            unique：创建唯一索引
            primary key：主键，自动成为唯一索引
        - 示例：创建交易流水表，在流水号上创建唯一索引
            create table acct_trans_detail(
              trans_sn varchar(32) not null,  -- 流水号
              trans_date detatime not null,   -- 交易时间
              acct_no varchar(32) not null,   -- 账号
              trans_type int not null,        -- 交易类型
              amt decimal(10,2) not null,     -- 交易金额
              unique(trans_sn),               -- 交易流水建唯一索引
              index(trans_date)               -- 交易日期普通索引
            )；
            -- 查看索引
            show index from acct_trans_detail;      -- 列表模式
            show index from acct_trans_detail \G;   -- 竖排模式
        - 示例：通过修改方式创建索引
            -- 在acct_trans-detail 表acct_no字段上
            -- 创建普通索引
            -- acct_trans_detail  为表名
            -- idx_acct_no        为索引名
            -- acct_no            为字段名
            alter table acct_trans_detail
            add index idx_acct_no(acct_no);
            -- 或
            create index idx_acct_no
            on acct_trans_detail(acct_no);
    4)删除索引
        - 语法：drop index 索引名称 on 表名
        - 示例：
            -- 删除acct_trans_detail表中名称为
            -- idx_acct_no的索引
            drop index idx_acct_no
            on acct_trans_detail;
    5)索引优缺点
        - 优点：
          提高查询效率
          唯一索引能够保证数据唯一性
          在使用分组、排序等子句时，能提高效率
        - 缺点：
          索引需要额外的存储空间
          维护索引结构需要额外的开销
          会降低增、删、改的效率
    6)索引使用原则  ***重点***
        * 合宜
        - 在经常作为查询条件的字段上建立索引
        - 主键和唯一索引查询效率较高
        - 在经常排序的字段上使用索引

        * 不合宜
        - 使用恰当索引，索引不是越多越好
        - 避免对经常更新的表使用过多索引
        - 字段值太少不宜使用索引(如 性别、状态)
        - 数据量太少不适合使用索引
        - 二进制类型字段不适合使用索引

4.表的复制、重命名
    1)复制 (以下三种方法，键都会丢掉，不复制键属性！！！)
        - 完全复制
            create table acct_new
            select * from acct;
        - 部分复制(只复制满足查询条件的数据)
            create table acct_new
            select * from acct where balance < 2000;
        - 只复制结构，不复制数据
            create table acct_new
            select * from acct where 1=0;   -- 1=0 为False，可以改为FALSE 或其他结果为False 的表达式
    2)表的重命名
        - 格式：alter table 原表名 rename [to] 新表名    -- to可以不写
        - 示例：alter table acct rename to acct_new


drop：删库、删表、删字段、删索引


作业：
在上次作业基础上，编写下列SQL语句
1.修改表order，在order_id添加主键
2.在cust_id, order_date, products_num字段，添加非空约束
3.在status字段上添加默认值，默认为1
4.在order_date字段上添加普通索引

